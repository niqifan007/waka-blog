<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>solidity - 标签 - waka&#39;s blog</title>
    <link>http://blog.579878700.xyz/tags/solidity/</link>
    <description>solidity - 标签 - waka&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 17 Mar 2023 00:35:21 &#43;0800</lastBuildDate><atom:link href="http://blog.579878700.xyz/tags/solidity/" rel="self" type="application/rss+xml" /><item>
  <title>solidity动态数组的增删改查</title>
  <link>http://blog.579878700.xyz/solidity_curd/</link>
  <pubDate>Fri, 17 Mar 2023 00:35:21 &#43;0800</pubDate>
  <author>map[avatar:/images/avatar.jpg email:&lt;nil&gt; link:&lt;nil&gt; name:waka]</author>
  <guid>http://blog.579878700.xyz/solidity_curd/</guid>
  <description><![CDATA[<h2 id="数组类型">数组类型</h2>
<p>Solidity支持两种数组: 静态数组和动态数组。</p>
<p>又分<code>storage</code>与<code>memory</code>型数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">uint[] memory list;
</span></span><span class="line"><span class="cl">//变长memory数组，使用前必须确定长度
</span></span><span class="line"><span class="cl">list =new uint[](a);
</span></span><span class="line"><span class="cl">//然后再使用，一般用在函数内
</span></span><span class="line"><span class="cl">memory型数组不能使用pop,push也不能修改length
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="静态数组">静态数组</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// 固定长度为2的静态数组定义
</span></span><span class="line"><span class="cl">uint[2] fixedArray;
</span></span><span class="line"><span class="cl">//定长数组实例化
</span></span><span class="line"><span class="cl">fixedArray = [4, 6];
</span></span></code></pre></td></tr></table>
</div>
</div><p>静态数组不可新增元素，但可修改现有元素的值。</p>
<h3 id="动态数组">动态数组</h3>
<p>动态数组，长度不固定，可以动态添加元素。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//声明
</span></span><span class="line"><span class="cl">uint[] dynamicArray;
</span></span><span class="line"><span class="cl">//初始化，这里实例化一个长度为2的数组，值为0。
</span></span><span class="line"><span class="cl">dynamicArray = new uint[](2);
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">library</span> <span class="n">Array</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">push</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_num</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">assembly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 在可变数组的 末尾追加 一个value (_num)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">mstore</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="nf">mul</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="nf">mload</span><span class="p">(</span><span class="n">_nums</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="mh">0x20</span><span class="p">)),</span> <span class="n">_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// 可变数组的length 加 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">mstore</span><span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="nf">add</span><span class="p">(</span><span class="nf">mload</span><span class="p">(</span><span class="n">_nums</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// 0x40 是空闲内存指针的预定义位置 (value 为 空闲指针开始位)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">mstore</span><span class="p">(</span><span class="mh">0x40</span><span class="p">,</span> <span class="nf">add</span><span class="p">(</span><span class="nf">mload</span><span class="p">(</span><span class="mh">0x40</span><span class="p">),</span> <span class="mh">0x20</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">pop</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">num_</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">assembly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 取出可变数组的最后一个value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">num_</span> <span class="o">:=</span> <span class="nf">mload</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="nf">mul</span><span class="p">(</span><span class="nf">mload</span><span class="p">(</span><span class="n">_nums</span><span class="p">),</span> <span class="mh">0x20</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// length - 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">mstore</span><span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="nf">sub</span><span class="p">(</span><span class="nf">mload</span><span class="p">(</span><span class="n">_nums</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">del</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">assembly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 下标位置需 小于 数组.length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">if</span> <span class="nf">lt</span><span class="p">(</span><span class="n">_index</span><span class="p">,</span> <span class="nf">mload</span><span class="p">(</span><span class="n">_nums</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 将最后一个value 移到 _index 下标处 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="nf">mstore</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="nf">add</span><span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="nf">mul</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="n">_index</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="mh">0x20</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">                    <span class="nf">mload</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="nf">mul</span><span class="p">(</span><span class="nf">mload</span><span class="p">(</span><span class="n">_nums</span><span class="p">),</span> <span class="mh">0x20</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// length - 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="nf">mstore</span><span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="nf">sub</span><span class="p">(</span><span class="nf">mload</span><span class="p">(</span><span class="n">_nums</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">update</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span> <span class="n">_index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span> <span class="n">_num</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_nums</span><span class="p">[</span><span class="n">_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">_num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">get</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">internal</span>
</span></span><span class="line"><span class="cl">        <span class="k">pure</span>
</span></span><span class="line"><span class="cl">        <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">_nums</span><span class="p">[</span><span class="n">_index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">testArr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">using</span> <span class="n">Array</span> <span class="k">for</span> <span class="kt">uint256</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">push</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">external</span>
</span></span><span class="line"><span class="cl">        <span class="k">pure</span>
</span></span><span class="line"><span class="cl">        <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_nums</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">_nums</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">pop</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">external</span>
</span></span><span class="line"><span class="cl">        <span class="k">pure</span>
</span></span><span class="line"><span class="cl">        <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span><span class="p">,</span> <span class="kt">uint256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span> <span class="n">num_</span> <span class="o">=</span> <span class="n">_nums</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span><span class="n">_nums</span><span class="p">,</span> <span class="n">num_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">del</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">external</span>
</span></span><span class="line"><span class="cl">        <span class="k">pure</span>
</span></span><span class="line"><span class="cl">        <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_nums</span><span class="p">.</span><span class="n">del</span><span class="p">(</span><span class="n">_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">_nums</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">update</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span> <span class="n">_index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span> <span class="n">_num</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="k">external</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_nums</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">_index</span><span class="p">,</span> <span class="n">_num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">_nums</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">get</span><span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_nums</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">external</span>
</span></span><span class="line"><span class="cl">        <span class="k">pure</span>
</span></span><span class="line"><span class="cl">        <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">_nums</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>
