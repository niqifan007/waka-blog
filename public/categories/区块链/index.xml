<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>区块链 - 分类 - waka&#39;s blog</title>
    <link>http://blog.579878700.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
    <description>区块链 - 分类 - waka&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 15 Mar 2023 23:36:31 &#43;0800</lastBuildDate><atom:link href="http://blog.579878700.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/" rel="self" type="application/rss+xml" /><item>
  <title>OrderBook的实现思路</title>
  <link>http://blog.579878700.xyz/posts/orderbook/</link>
  <pubDate>Wed, 15 Mar 2023 23:36:31 &#43;0800</pubDate>
  <author>map[avatar:/images/avatar.jpg email:&lt;nil&gt; link:&lt;nil&gt; name:waka]</author>
  <guid>http://blog.579878700.xyz/posts/orderbook/</guid>
  <description><![CDATA[<h2 id="什么是orderbook">什么是OrderBook</h2>
<p><strong>OrderBook是一个包含了所有交易者信息的订单集合</strong>，他们想买或者想卖。<strong>想买的order叫做bid，想卖的order叫做ask</strong>，这些bid和ask的order一旦满足了各自的条件，就会尽可能快的完成配对，促成一笔交易。这里有两个种类的order需要介绍一下，它们也是最为基本的交易订单。<strong>第一种是市价 market order，买和卖都是依据当前在orderbook能寻找到的最优价格执行</strong>。<strong>第二种是限价 limit order，买和卖都是按照已经确定量和价格进行</strong>。OrderBook是传统金融中一个很重要的交易方式，通过OrderBook中显示的信息，可以判断当前市场的供需关系以及价格关系，基于以上的判断可以对市场中的下一步发生的变化进行一个判断。<strong>在去中心化金融(Defi)，刚开始发展时也借鉴到了OrderBook的模式</strong>，由于传统的OrderBook由中心化机构进行给出，导致了信息中心化不透明。所以在Defi中想实现一个OrderBook完全只有买方和卖方进行参与，而机构只收取相依的手续费即可。<br>
看起来这样的想法是一种很不错的想法，提供了一个更加公平和自由度更高的一个市场让人们去操作。但是在实际中进行时会发现问题：</p>
<ul>
<li><strong>对于OrderBook需求来说整个区块链网络中交易成交的速率和数量都无法满足</strong>，即使以太坊的速率相较于比特币网络有了很大的提高。</li>
<li>在交易中有gas的存在，<strong>如果没有一种很好的方法去定位到合适的订单的话，随着订单数量的变多，找到相应订单所需的gas会消耗很大</strong>。并且每笔交易都有一个gas上限，当gas达到相应上限的时候就会导致交易失败。</li>
</ul>
<h2 id="实现orderbook思路">实现OrderBook思路</h2>
<h2 id="一般的思路">一般的思路</h2>
<p>抛开以太坊特殊的条件，我们在实现OrderBook的时候，采用的最常用的方法就是蛮力法。思路：</p>
<ul>
<li>创建买单和买单两个数组</li>
<li>当有买单创建的时候，对买单数组进行遍历，找到对应价格对应数量的订单，完成一笔交易。如果没找到，将买单加入买单数组。同理创建卖单时也进行相应的操作。</li>
</ul>
<p>这个方法能确保找到所需要的的交易，但是<strong>整个过程的时间复杂度为O(n)</strong>,然后可以进行并发和互斥锁结合，可以在短时间内处理大量的买单和买单满足需求。但是随着订单量的增多，所需要的时间也会增多，这在链上和链下的环境中都是不能接受的。<br>
但是，如果不采用蛮力法的话，将<strong>买单和卖单分别用排序二叉树的方式进行数据保存，那样的话时间复杂度就会变为O(logn)</strong>，这样可以优化查找，只是在插入是有点麻烦。</p>
<h2 id="换种思路">换种思路</h2>
<p>在智能合约中我们要尽量避免时使用循环的方式，这是很费gas的。而为了确保能够得到想要的价格。我们可以这样设计：</p>
<ul>
<li>创建两个买单和卖单的两个映射
<ul>
<li><code>mapping(uint =&gt; mapping(uint =&gt; address[])) Bid;</code></li>
<li><code>mapping(uint =&gt; mapping(uint =&gt; address[])) Ask;</code></li>
<li><strong>前一个uint是价格，第二个uint是数量，最后面的是卖方或买方的地址</strong>；</li>
</ul>
</li>
<li>每次有买单和卖单进来的时候，在mapping中进行搜索，完成交易。搜索不到的话加入对应的mapping中即可。</li>
</ul>
<p>看上去这样的两个映射可以解决买卖双方的订单的查找的时间复杂度问题（<strong>将时间复杂度降为O(1)</strong>）。但是这样却忽略了一个问题，这样做我们无法看到整个市场的变化和趋势。我们这样设计代码的话只是实现了OrderBook的一部分功能。如果想要实现OrderBook，还有很多要进行修改的地方。</p>
<h2 id="第三种思路">第三种思路</h2>
<p>在链上尽量不要使用大循环，但是我们可以将大循环变为小的循环，这样来说是可以的。同时我们也要反映整个OrderBook的变化，我们就可以设计一个压缩前缀树：</p>
<ul>
<li><strong>树中的每个节点为数字0~9，这样从头结点到叶子节点前的节点就可以连成一串数字，这个数字表示金额</strong>，每个叶子节点储存的是订单数组，每个订单保存了在此金额下的数量和地址。</li>
<li>同样树也要分两颗树，买家树和卖家树。</li>
<li><strong>每次有新金额出现时，要对树进行修改</strong>，对树进行扩展，保证从头到尾连成的数字为金额。</li>
<li><strong>同时当金额对应的叶子节点中数组长度为0时，要对树进行删除</strong>，这样做的目的是保证在对树遍历时减少时间消耗。</li>
<li><strong>在新买单创建时，先在卖家树中找到对应金额的数组，在对数组进行遍历找到对应金额(此时就将大循环优化为一个小循环)</strong>，找到对应订单后就成交交易。没找到的话就将其加入买家树。(同理，卖单也是这样处理)</li>
</ul>
<p>这样的话就可以兼顾市场变化和挂单的需求。</p>
<h2 id="问题">问题</h2>
<p>以上的思路都可以实现OrderBook，但是还有许多问题需要进行考虑：</p>
<ul>
<li>如果对应的数量找不到，但是存在两个或两个以上的订单之和满足要求的时候，要怎么进行处理？<strong>在时间复杂度较小的前提下如何完成这个拆分寻找的过程？</strong></li>
<li><strong>整个树的结构要如何设计？才能使得在增删改查较为方便？</strong></li>
</ul>
<h2 id="结尾">结尾</h2>
<p>虽然现在主流的DEX没有使用OrderBook，而是使用LP这样的方式，但是LP也会存在着很多的问题需要解决。正是因为OrderBook的一些功能无法满足Defi的需求，所以才会有LP的出现。技术的适用性是需要结合需求的。或许在以后可能会产生适应区块链的OrderBook。</p>]]></description>
</item>
<item>
  <title>《Self-Sovereign Identity》(《身份自主权》中英文书籍)</title>
  <link>http://blog.579878700.xyz/posts/ssi_book/</link>
  <pubDate>Sun, 05 Mar 2023 23:27:33 &#43;0800</pubDate>
  <author>map[avatar:/images/avatar.jpg email:&lt;nil&gt; link:&lt;nil&gt; name:waka]</author>
  <guid>http://blog.579878700.xyz/posts/ssi_book/</guid>
  <description><![CDATA[<h2 id="百度网盘下载地址">百度网盘下载地址</h2>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1ZkE_goWKyTMtZPdyZXRp7A?pwd=b0m1"target="_blank" rel="external nofollow noopener noreferrer">https://pan.baidu.com/s/1ZkE_goWKyTMtZPdyZXRp7A?pwd=b0m1<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
提取码：<strong>b0m1</strong></p>
</blockquote>
<p>因为网上没有找到中文书籍，使用了deepl机翻，翻译的排版不是很好，但是基本能看懂。</p>
<h2 id="内容简介">内容简介</h2>
<p>​	Self-Sovereign Identity gives you a radical new perspective on how we represent ourselves in the world. This case study-driven book cuts through the jargon and hype to expose the amazing potential SSI offers for for security, privacy, identity, and even uprooting way the global economy works. SSI experts Drummond Reed and Alex Preukschat present a vision of the future, examining how SSI protocols will impact industries from banking through to government. You’ll get a clear mental model for how SSI works as you tour SSI-enabled eCommerce and eHealth applications and their advantages over current technologies. While you learn the philosophical and sociological concepts that underpin SSI, you’ll reach the book’s lightbulb moment: what this radical technology really means for the shape of our lives, our businesses, and our futures.</p>
<p>what&rsquo;s inside<br>
How SSI will affect your industry<br>
The essential technical and legal concepts of SSI<br>
The architecture of SSI software<br>
Emerging standards for SSI</p>
<p>​	自我主权身份 &ldquo;为您提供了一个关于我们如何在世界中代表自己的全新视角。这本以案例研究为导向的书突破了专业术语和炒作，揭示了SSI为安全、隐私、身份，甚至为全球经济运作方式提供的惊人潜力。SSI专家Drummond Reed和Alex Preukschat提出了未来的愿景，研究了SSI协议将如何影响从银行到政府的各个行业。当你参观SSI支持的电子商务和电子医疗应用以及它们相对于当前技术的优势时，你会对SSI如何工作有一个清晰的心理模型。在你学习支撑SSI的哲学和社会学概念的同时，你将迎来本书的闪光时刻：这项激进的技术对我们的生活、商业和未来的形态意味着什么。</p>
<p>书中内容<br>
SSI将如何影响你的行业<br>
SSI的基本技术和法律概念<br>
SSI软件的架构<br>
新兴的SSI标准</p>
<p></p>]]></description>
</item>
<item>
  <title>默克尔树(Merkle tree)的Go实现</title>
  <link>http://blog.579878700.xyz/posts/merkle_tree_go/</link>
  <pubDate>Sun, 05 Mar 2023 14:09:53 &#43;0800</pubDate>
  <author>map[avatar:/images/avatar.jpg email:&lt;nil&gt; link:&lt;nil&gt; name:waka]</author>
  <guid>http://blog.579878700.xyz/posts/merkle_tree_go/</guid>
  <description><![CDATA[<h3 id="merkle-trees">Merkle trees</h3>
<hr>
<p>Merkle树是区块链技术的基本组成部分。它是由不同数据块的散列组成的数学数据结构，用作块中所有交易的摘要。</p>
<p>它还允许对大量数据中的内容进行有效和安全的验证。此结构有助于验证数据的一致性和内容。比特币和以太坊都使用Merkle树结构。Merkle树也被称为哈希树。</p>
<p>从根本上说，Merkle树是数据结构树，其中每个叶节点都用数据块的哈希标记，非叶节点用加密标记 其子节点标签的哈希值。叶节点是树中的最低节点。</p>
<p></p>
<h3 id="原理">原理</h3>
<p>区块链中每个区块都会有一个 Merkle 树，它从叶子节点（树的底部）开始，一个叶子节点就是一个交易哈希。叶子节点的数量必须是双数，但是并非每个块都包含了双数的交易。如果一个块里面的交易数为单数，那么就将最后一个叶子节点（也就是 Merkle 树的最后一个交易，不是区块的最后一笔交易）复制一份凑成双数。</p>
<p>从下往上，两两成对，连接两个节点哈希，将组合哈希作为新的哈希。新的哈希就成为新的树节点。重复该过程，直到仅有一个节点，也就是树根。根哈希然后就会当作是整个块交易的唯一标示，将它保存到区块头，然后用于工作量证明。</p>
<hr>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">  9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 45
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 46
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 47
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 48
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 49
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 50
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 51
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 52
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 53
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 54
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 55
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 56
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 57
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 58
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 59
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 60
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 61
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 62
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 63
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 64
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 65
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 66
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 67
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 68
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 69
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 70
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 71
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 72
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 73
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 74
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 75
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 76
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 77
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 78
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 79
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 80
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 81
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 82
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 83
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 84
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 85
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 86
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 87
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 88
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 89
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 90
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 91
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 92
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 93
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 94
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 95
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 96
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 97
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 98
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f"> 99
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">100
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">101
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">102
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">103
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">104
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">105
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">106
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">107
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f">108
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#c678dd">package</span> <span style="color:#e06c75">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#98c379">&#34;bufio&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#98c379">&#34;crypto/sha256&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#98c379">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#98c379">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#98c379">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e">//默克尔树节点结构体
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#c678dd">type</span> <span style="color:#e06c75">Node</span> <span style="color:#c678dd">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">Index</span>    <span style="color:#e5c07b">int</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">Value</span>    <span style="color:#e5c07b">string</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">RootTree</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">MHTree</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e">//默克尔树结构体
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#c678dd">type</span> <span style="color:#e06c75">MHTree</span> <span style="color:#c678dd">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">Length</span>   <span style="color:#e5c07b">int</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">Nodes</span>    []<span style="color:#e06c75">Node</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">rootHash</span> <span style="color:#e5c07b">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e">//获得默克尔树根节点哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#c678dd">func</span> (<span style="color:#e06c75">t</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">MHTree</span>) <span style="color:#61afef;font-weight:bold">GetRootHash</span>() <span style="color:#e5c07b">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//不管是否存储，都重新计算哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#e06c75">t</span>.<span style="color:#e06c75">rootHash</span> =   <span style="color:#e06c75">t</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#d19a66">1</span>].<span style="color:#61afef;font-weight:bold">getNodeHash</span>()                            
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">t</span>.<span style="color:#e06c75">rootHash</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e">//计算默克尔树中某个节点的哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#c678dd">func</span> (<span style="color:#e06c75">n</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">Node</span>) <span style="color:#61afef;font-weight:bold">getNodeHash</span>() <span style="color:#e5c07b">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//叶子节点，则直接计算该节点Value的哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">if</span> <span style="color:#e06c75">n</span>.<span style="color:#e06c75">Value</span> <span style="color:#56b6c2">!=</span> <span style="color:#98c379">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">return</span> <span style="color:#61afef;font-weight:bold">calDataHash</span>(<span style="color:#e06c75">n</span>.<span style="color:#e06c75">Value</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//非叶子节点，则递归计算哈希值,其为2个子节点哈希值的哈希值123123123123
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#c678dd">return</span> <span style="color:#61afef;font-weight:bold">calDataHash</span>(<span style="color:#e06c75">n</span>.<span style="color:#e06c75">RootTree</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#e06c75">n</span>.<span style="color:#e06c75">Index</span><span style="color:#56b6c2">*</span><span style="color:#d19a66">2</span>].<span style="color:#61afef;font-weight:bold">getNodeHash</span>() <span style="color:#56b6c2">+</span> <span style="color:#e06c75">n</span>.<span style="color:#e06c75">RootTree</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#e06c75">n</span>.<span style="color:#e06c75">Index</span><span style="color:#56b6c2">*</span><span style="color:#d19a66">2</span><span style="color:#56b6c2">+</span><span style="color:#d19a66">1</span>].<span style="color:#61afef;font-weight:bold">getNodeHash</span>()
</span></span><span style="display:flex;"><span>        )                                                         
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e">//计算数据的哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#c678dd">func</span> <span style="color:#61afef;font-weight:bold">calDataHash</span>(<span style="color:#e06c75">data</span> <span style="color:#e5c07b">string</span>) <span style="color:#e5c07b">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">hash</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">sha256</span>.<span style="color:#61afef;font-weight:bold">New</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">hash</span>.<span style="color:#61afef;font-weight:bold">Write</span>([]<span style="color:#e5c07b">byte</span>(<span style="color:#e06c75">data</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e5c07b">string</span>(<span style="color:#e06c75">hash</span>.<span style="color:#61afef;font-weight:bold">Sum</span>(<span style="color:#e5c07b">nil</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e">//从结构化文件创建默克尔树
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#c678dd">func</span> <span style="color:#61afef;font-weight:bold">CreateMHTree</span>(<span style="color:#e06c75">fileName</span> <span style="color:#e5c07b">string</span>) <span style="color:#e06c75">MHTree</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">var</span> <span style="color:#e06c75">tree</span> <span style="color:#e06c75">MHTree</span>
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//打开文件
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#e06c75">file</span>, <span style="color:#e06c75">err</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">os</span>.<span style="color:#61afef;font-weight:bold">Open</span>(<span style="color:#e06c75">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">if</span> <span style="color:#e06c75">err</span> <span style="color:#56b6c2">!=</span> <span style="color:#e5c07b">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#e5c07b">panic</span>(<span style="color:#e06c75">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">defer</span> <span style="color:#e06c75">file</span>.<span style="color:#61afef;font-weight:bold">Close</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//获取读取器
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#e06c75">buf</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">bufio</span>.<span style="color:#61afef;font-weight:bold">NewReader</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//读取首行，获得叶子节点数目（要求叶子节点数目为2的整数次幂
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#e06c75">dataCountStr</span>, <span style="color:#e06c75">_</span>, <span style="color:#e06c75">_</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">buf</span>.<span style="color:#61afef;font-weight:bold">ReadLine</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">dataCount</span>, <span style="color:#e06c75">_</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">strconv</span>.<span style="color:#61afef;font-weight:bold">Atoi</span>(<span style="color:#e5c07b">string</span>(<span style="color:#e06c75">dataCountStr</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//判断幂次
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#e06c75">level</span> <span style="color:#56b6c2">:=</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">i</span> <span style="color:#56b6c2">:=</span> <span style="color:#d19a66">1</span>; ; <span style="color:#e06c75">i</span><span style="color:#56b6c2">++</span> {                                          
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#d19a66">2</span><span style="color:#56b6c2">&lt;&lt;</span><span style="color:#e06c75">i</span> <span style="color:#56b6c2">==</span> <span style="color:#e06c75">dataCount</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">level</span> = <span style="color:#e06c75">i</span>
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">break</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//创建默克尔树
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//给非叶子节点赋值
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">i</span> <span style="color:#56b6c2">:=</span> <span style="color:#d19a66">1</span>; <span style="color:#e06c75">i</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">2</span><span style="color:#56b6c2">&lt;&lt;</span><span style="color:#e06c75">level</span><span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>; <span style="color:#e06c75">i</span><span style="color:#56b6c2">++</span> {                               
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">tree</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#e06c75">i</span>].<span style="color:#e06c75">Index</span> = <span style="color:#e06c75">i</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">tree</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#e06c75">i</span>].<span style="color:#e06c75">RootTree</span> = <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">tree</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">//读取文件数据，给叶子节点赋值
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">i</span> <span style="color:#56b6c2">:=</span> <span style="color:#d19a66">2</span> <span style="color:#56b6c2">&lt;&lt;</span> <span style="color:#e06c75">level</span>; <span style="color:#e06c75">i</span> &lt; <span style="color:#e06c75">tree</span>.<span style="color:#e06c75">Length</span>; <span style="color:#e06c75">i</span><span style="color:#56b6c2">++</span> {                  
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">str</span>, <span style="color:#e06c75">_</span>, <span style="color:#e06c75">_</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">buf</span>.<span style="color:#61afef;font-weight:bold">ReadLine</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">tree</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#e06c75">i</span>].<span style="color:#e06c75">Index</span> = <span style="color:#e06c75">i</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">tree</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#e06c75">i</span>].<span style="color:#e06c75">RootTree</span> = <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">tree</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">tree</span>.<span style="color:#e06c75">Nodes</span>[<span style="color:#e06c75">i</span>].<span style="color:#e06c75">Value</span> = <span style="color:#e5c07b">string</span>(<span style="color:#e06c75">str</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">tree</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">func</span> <span style="color:#61afef;font-weight:bold">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">var</span> <span style="color:#e06c75">fileName</span> <span style="color:#e5c07b">string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">fmt</span>.<span style="color:#61afef;font-weight:bold">Println</span>(<span style="color:#98c379">&#34;请输入原始数据文件名称&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">fmt</span>.<span style="color:#61afef;font-weight:bold">Scanln</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">mhTree1</span> <span style="color:#56b6c2">:=</span> <span style="color:#61afef;font-weight:bold">CreateMHTree</span>(<span style="color:#e06c75">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">fmt</span>.<span style="color:#61afef;font-weight:bold">Println</span>(<span style="color:#98c379">&#34;请输入比对数据文件名称&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">fmt</span>.<span style="color:#61afef;font-weight:bold">Scanln</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">mhTree2</span> <span style="color:#56b6c2">:=</span> <span style="color:#61afef;font-weight:bold">CreateMHTree</span>(<span style="color:#e06c75">fileName</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">hash1</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">mhTree1</span>.<span style="color:#61afef;font-weight:bold">GetRootHash</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">hash2</span> <span style="color:#56b6c2">:=</span> <span style="color:#e06c75">mhTree2</span>.<span style="color:#61afef;font-weight:bold">GetRootHash</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">if</span> <span style="color:#e06c75">hash1</span> <span style="color:#56b6c2">==</span> <span style="color:#e06c75">hash2</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">fmt</span>.<span style="color:#61afef;font-weight:bold">Println</span>(<span style="color:#98c379">&#34;用户没有改变数据&#34;</span>)
</span></span><span style="display:flex;"><span>	} <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">fmt</span>.<span style="color:#61afef;font-weight:bold">Println</span>(<span style="color:#98c379">&#34;用户改变了数据&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>
