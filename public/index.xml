<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>waka&#39;s blog</title>
    <link>http://blog.579878700.xyz/</link>
    <description>这是waka的blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 05 Mar 2023 23:27:33 &#43;0800</lastBuildDate>
      <atom:link href="http://blog.579878700.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>《Self-Sovereign Identity》(《身份自主权》中英文书籍)</title>
  <link>http://blog.579878700.xyz/posts/ssi_book/</link>
  <pubDate>Sun, 05 Mar 2023 23:27:33 &#43;0800</pubDate>
  <author>map[avatar:/images/avatar.jpg email:&lt;nil&gt; link:&lt;nil&gt; name:waka]</author>
  <guid>http://blog.579878700.xyz/posts/ssi_book/</guid>
  <description><![CDATA[<h2 id="百度网盘下载地址">百度网盘下载地址</h2>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1ZkE_goWKyTMtZPdyZXRp7A?pwd=b0m1"target="_blank" rel="external nofollow noopener noreferrer">https://pan.baidu.com/s/1ZkE_goWKyTMtZPdyZXRp7A?pwd=b0m1<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
提取码：<strong>b0m1</strong></p>
</blockquote>
<p>因为网上没有找到中文书籍，使用了deepl机翻，翻译的排版不是很好，但是基本能看懂。</p>
<h2 id="内容简介">内容简介</h2>
<p>​	Self-Sovereign Identity gives you a radical new perspective on how we represent ourselves in the world. This case study-driven book cuts through the jargon and hype to expose the amazing potential SSI offers for for security, privacy, identity, and even uprooting way the global economy works. SSI experts Drummond Reed and Alex Preukschat present a vision of the future, examining how SSI protocols will impact industries from banking through to government. You’ll get a clear mental model for how SSI works as you tour SSI-enabled eCommerce and eHealth applications and their advantages over current technologies. While you learn the philosophical and sociological concepts that underpin SSI, you’ll reach the book’s lightbulb moment: what this radical technology really means for the shape of our lives, our businesses, and our futures.</p>
<p>what&rsquo;s inside<br>
How SSI will affect your industry<br>
The essential technical and legal concepts of SSI<br>
The architecture of SSI software<br>
Emerging standards for SSI</p>
<p>​	自我主权身份 &ldquo;为您提供了一个关于我们如何在世界中代表自己的全新视角。这本以案例研究为导向的书突破了专业术语和炒作，揭示了SSI为安全、隐私、身份，甚至为全球经济运作方式提供的惊人潜力。SSI专家Drummond Reed和Alex Preukschat提出了未来的愿景，研究了SSI协议将如何影响从银行到政府的各个行业。当你参观SSI支持的电子商务和电子医疗应用以及它们相对于当前技术的优势时，你会对SSI如何工作有一个清晰的心理模型。在你学习支撑SSI的哲学和社会学概念的同时，你将迎来本书的闪光时刻：这项激进的技术对我们的生活、商业和未来的形态意味着什么。</p>
<p>书中内容<br>
SSI将如何影响你的行业<br>
SSI的基本技术和法律概念<br>
SSI软件的架构<br>
新兴的SSI标准</p>
<p></p>]]></description>
</item>
<item>
  <title>默克尔树(Merkle tree)的Go实现</title>
  <link>http://blog.579878700.xyz/posts/merkle_tree_go/</link>
  <pubDate>Sun, 05 Mar 2023 14:09:53 &#43;0800</pubDate>
  <author>map[avatar:/images/avatar.jpg email:&lt;nil&gt; link:&lt;nil&gt; name:waka]</author>
  <guid>http://blog.579878700.xyz/posts/merkle_tree_go/</guid>
  <description><![CDATA[<h3 id="merkle-trees">Merkle trees</h3>
<hr>
<p>Merkle树是区块链技术的基本组成部分。它是由不同数据块的散列组成的数学数据结构，用作块中所有交易的摘要。</p>
<p>它还允许对大量数据中的内容进行有效和安全的验证。此结构有助于验证数据的一致性和内容。比特币和以太坊都使用Merkle树结构。Merkle树也被称为哈希树。</p>
<p>从根本上说，Merkle树是数据结构树，其中每个叶节点都用数据块的哈希标记，非叶节点用加密标记 其子节点标签的哈希值。叶节点是树中的最低节点。</p>
<p></p>
<h3 id="原理">原理</h3>
<p>区块链中每个区块都会有一个 Merkle 树，它从叶子节点（树的底部）开始，一个叶子节点就是一个交易哈希。叶子节点的数量必须是双数，但是并非每个块都包含了双数的交易。如果一个块里面的交易数为单数，那么就将最后一个叶子节点（也就是 Merkle 树的最后一个交易，不是区块的最后一笔交易）复制一份凑成双数。</p>
<p>从下往上，两两成对，连接两个节点哈希，将组合哈希作为新的哈希。新的哈希就成为新的树节点。重复该过程，直到仅有一个节点，也就是树根。根哈希然后就会当作是整个块交易的唯一标示，将它保存到区块头，然后用于工作量证明。</p>
<hr>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;bufio&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/sha256&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//默克尔树节点结构体
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Node</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Index</span>    <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Value</span>    <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">RootTree</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">MHTree</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//默克尔树结构体
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">MHTree</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Length</span>   <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Nodes</span>    []<span style="color:#a6e22e">Node</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rootHash</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//获得默克尔树根节点哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">MHTree</span>) <span style="color:#a6e22e">GetRootHash</span>() <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//不管是否存储，都重新计算哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">rootHash</span> =   <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">getNodeHash</span>()                            
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">rootHash</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//计算默克尔树中某个节点的哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>) <span style="color:#a6e22e">getNodeHash</span>() <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//叶子节点，则直接计算该节点Value的哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Value</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">calDataHash</span>(<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Value</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//非叶子节点，则递归计算哈希值,其为2个子节点哈希值的哈希值123123123123
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">calDataHash</span>(<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">RootTree</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Index</span><span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>].<span style="color:#a6e22e">getNodeHash</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">RootTree</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Index</span><span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">getNodeHash</span>()
</span></span><span style="display:flex;"><span>        )                                                         
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//计算数据的哈希值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">calDataHash</span>(<span style="color:#a6e22e">data</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">hash</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sha256</span>.<span style="color:#a6e22e">New</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">hash</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#a6e22e">data</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> string(<span style="color:#a6e22e">hash</span>.<span style="color:#a6e22e">Sum</span>(<span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//从结构化文件创建默克尔树
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">CreateMHTree</span>(<span style="color:#a6e22e">fileName</span> <span style="color:#66d9ef">string</span>) <span style="color:#a6e22e">MHTree</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tree</span> <span style="color:#a6e22e">MHTree</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//打开文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//获取读取器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">buf</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">file</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//读取首行，获得叶子节点数目（要求叶子节点数目为2的整数次幂
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">dataCountStr</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">ReadLine</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dataCount</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(string(<span style="color:#a6e22e">dataCountStr</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//判断幂次
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">level</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; ; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {                                          
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">&lt;&lt;</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">dataCount</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">level</span> = <span style="color:#a6e22e">i</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//创建默克尔树
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//给非叶子节点赋值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">&lt;&lt;</span><span style="color:#a6e22e">level</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {                               
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">tree</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">Index</span> = <span style="color:#a6e22e">i</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">tree</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">RootTree</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">tree</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//读取文件数据，给叶子节点赋值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#a6e22e">level</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">tree</span>.<span style="color:#a6e22e">Length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {                  
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">str</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">ReadLine</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">tree</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">Index</span> = <span style="color:#a6e22e">i</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">tree</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">RootTree</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">tree</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">tree</span>.<span style="color:#a6e22e">Nodes</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">Value</span> = string(<span style="color:#a6e22e">str</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tree</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fileName</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;请输入原始数据文件名称&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Scanln</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mhTree1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">CreateMHTree</span>(<span style="color:#a6e22e">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;请输入比对数据文件名称&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Scanln</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">fileName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mhTree2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">CreateMHTree</span>(<span style="color:#a6e22e">fileName</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">hash1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mhTree1</span>.<span style="color:#a6e22e">GetRootHash</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">hash2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mhTree2</span>.<span style="color:#a6e22e">GetRootHash</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">hash1</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">hash2</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;用户没有改变数据&#34;</span>)
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;用户改变了数据&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></description>
</item>
<item>
  <title>零知识学习资料收集汇总</title>
  <link>http://blog.579878700.xyz/posts/zk/</link>
  <pubDate>Sun, 05 Mar 2023 04:14:53 &#43;0800</pubDate>
  <author>map[avatar:/images/avatar.jpg email:&lt;nil&gt; link:&lt;nil&gt; name:waka]</author>
  <guid>http://blog.579878700.xyz/posts/zk/</guid>
  <description><![CDATA[<h1 id="零知识证明学习资源汇总">零知识证明学习资源汇总</h1>
<p>零知识证明技术是现代密码学三大基础之一，由 S.Goldwasser、S.Micali 及 C.Rackoff 在 20 世纪 80 年代初提出。早期的零知识证明由于其效率和可用性等限制，未得到很好的利用，仅停留在理论层面。直到近年来，零知识证明的理论研究才开始不断突破，同时区块链也为零知识证明创造了大展拳脚的机会，因而走进大众视野。</p>
<p>零知识证明这项“黑科技”随着它的热度逐渐增加，相关的学习资源也慢慢丰富起来了。但是由于，一方面零知识证明背后的原理颇为复杂，且内容繁多；另一方面，针对零知识证明的学习资源质量参差不齐，尚未形成系统。因此对绝大多数读者来说，学习零知识证明的难度依然很大。</p>
<p>本文收集了关于零知识证明的一些学习资料（包括科普文章，论文，开源仓库及相关学习网站等），并对这些资源进行了整理分析，希望能对大家有所帮助。</p>
<p><em>由于整理时间有限和笔者自身知识的局限性，文章存在不足之处，欢迎纠正、补充和探讨。</em></p>
<h2 id="1-故事中的零知识证明">1. 故事中的零知识证明</h2>
<p>初次接触零知识证明的小伙伴一定会问，究竟什么是零知识证明呢？它到底在做什么？</p>
<p>推荐几篇适合小白的文章：</p>
<ul>
<li>
<p><strong>「推荐文章一」<a href="https://medium.com/qed-it/the-incredible-machine-4d1270d7363a"target="_blank" rel="external nofollow noopener noreferrer">一个数独引发的惨案：零知识证明（Zero-Knowledge Proof）<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️❤️❤️</p>
<p>难度值：⭐️</p>
<p>这篇文章的作者是著名的 Ghost 和 Spectre 这两个协议的创始团队的领队 Aviv Zohar。文章非常接地气且通俗易懂，通过三个好朋友一起玩数独游戏的故事介绍了什么是零知识证明。</p>
<p>原文链接：https://medium.com/qed-it/the-incredible-machine-4d1270d7363a</p>
<p>中文翻译：https://zhuanlan.zhihu.com/p/34072069</p>
<p>另外这篇文章中引用了两篇介绍零知识证明的论文，也值得看一看。</p>
</li>
<li>
<p><strong>「推荐文章二」<a href="http://pages.cs.wisc.edu/~mkowalcz/628.pdf"target="_blank" rel="external nofollow noopener noreferrer">How to explain zero-knowledge protocols to your children<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️</p>
<p>这篇来自上个世纪的文章，正如它的标题一样，作者以给孩子讲故事的口吻，讲了一个阿里巴巴与四十大盗的故事，这个故事后来也成为了介绍零知识证明的经典故事。以故事的形式讲述零知识证明使得这篇文章理解起来也很简单。</p>
<p>原文链接：http://pages.cs.wisc.edu/~mkowalcz/628.pdf</p>
<p>中文翻译：https://blog.dreamerryao.wiki/archives/%E8%AF%91howtoexplainzero-knowledgeprotocolstoyourchildren</p>
</li>
<li>
<p><strong>「推荐文章三」<a href="http://www.wisdom.weizmann.ac.il/~naor/PAPERS/sudoku.pdf"target="_blank" rel="external nofollow noopener noreferrer">Cryptographic and Physical Zero-Knowledge Proof Systems for Solutions of Sudoku Puzzles<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>如何在不泄漏任何信息的前提下向别人证明你有一个数独问题的答案呢？同样这个问题也是介绍零知识证明的经典案例。论文中提出了使用一个零知识证明协议解决这个问题的方案，这篇论文相比较于前两篇文章，理论性更强一些，篇幅更长，协议的介绍更为详细，但总体来说还算比较好理解。</p>
<p>原文链接：http://www.wisdom.weizmann.ac.il/~naor/PAPERS/sudoku.pdf</p>
</li>
<li>
<p><strong>「推荐文章四」<a href="https://medium.com/hackernoon/zero-knowledge-proofs-a-tale-of-two-friends-d7a0ffac3185"target="_blank" rel="external nofollow noopener noreferrer">Zero knowledge proofs: a tale of two friends<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>与前面几篇文章类似，这篇文章也是通过讲故事的形式来向读者介绍零知识证明的。文中 Prover 要向 Verifier 证明其知道魔法的解法。这篇文章篇幅较短，内容理解起来难度较小。</p>
<p>原文链接：https://medium.com/hackernoon/zero-knowledge-proofs-a-tale-of-two-friends-d7a0ffac3185</p>
</li>
<li>
<p><strong>「推荐文章五」<a href="https://medium.com/hackernoon/eli5-zero-knowledge-proof-78a276db9eff"target="_blank" rel="external nofollow noopener noreferrer">Explain Like I’m 5: Zero Knowledge Proof (Halloween Edition)<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这同样是一篇讲故事的文章，哈哈~</p>
<p>这篇文章讲述了一个糖果和百万富翁的故事（Candy bars and millionaires），文章同样篇幅较短，内容理解起来难度较小。</p>
<p>原文链接：https://medium.com/hackernoon/eli5-zero-knowledge-proof-78a276db9eff</p>
</li>
</ul>
<p>兴许是因为如何解释零知识证明的问题并不简单，所以绝大部分入门级的科普文章都是从讲故事开始的。</p>
<h2 id="2-深入理解零知识证明">2. 深入理解零知识证明</h2>
<p>零知识证明技术涉及的知识点繁多，性质也各不相同。了解了什么是零知识证明以后，就需要对零知识证明更深刻的理解，推荐以下几篇零知识证明系列科普文。</p>
<ul>
<li>
<p><strong>「推荐文章六」零知识证明: 抛砖引玉</strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>作者是 Zerocash 协议的创建者之一，密码学大神 Matthew Green[1]。这两篇文章几乎涵盖了学习零知识证明原理所有的基本概念，文章思路很清晰。</p>
<ul>
<li>
<p><a href="https://ethfans.org/posts/zero-knowledge-proofs-illustrated-primerhttps://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-illustrated-primer/"target="_blank" rel="external nofollow noopener noreferrer">零知识证明: 抛砖引玉<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>第一篇文章主要从零知识证明的起源开始讲起，然后同样借助了地图三染色和 “时光机”来对零知识证明进行介绍。</p>
<p>原文链接：https://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-illustrated-primer/</p>
<p>中文翻译版本：https://ethfans.org/posts/zero-knowledge-proofs-illustrated-primer</p>
</li>
<li>
<p><a href="https://blog.cryptographyengineering.com/2017/01/21/zero-knowledge-proofs-an-illustrated-primer-part-2/"target="_blank" rel="external nofollow noopener noreferrer">零知识证明：抛砖引玉，Part-2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>这篇文章在第一篇的基础上，进一步对零知识证明的三个性质：可靠性，完整性和零知识，展开介绍。另外还结合 Schnorr 协议介绍了交互式和非交互式的概念。</p>
<p>原文链接：https://blog.cryptographyengineering.com/2017/01/21/zero-knowledge-proofs-an-illustrated-primer-part-2/</p>
<p>中文翻译版本：https://ethfans.org/posts/zero-knowledge-proofs-an-illustrated-primer-part-2</p>
</li>
</ul>
</li>
<li>
<p><strong>「推荐文章七」安比实验室零知识证明介绍系列文章</strong></p>
<p>推荐值：❤️❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这个系列的作者是安比实验室创始人郭宇，文章与以往的零知识证明科普文章的不同之处就是它没有单独去讲解零知识的基本原理。而且结合更多的概念和原理，更透彻得将零知识证明技术涉及得诸多原理逐一进行讲解，文章专业性较强，还包含了作者大量的思考，但理解起来也较为直观易懂，非常适合想要深入理解零知识证明的小伙伴。</p>
<p>另外这个系列的文章还在持续更新中。</p>
<ul>
<li>
<p><a href="https://sec-bit.github.io/blog/2019/07/31/zero-knowledge-and-proof/"target="_blank" rel="external nofollow noopener noreferrer">探索零知识证明系列一：初识「零知识」与「证明」<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>作为系列的第一篇，这篇文章首先介绍了「证明」的发展历程和「零知识」的作用，并举了一个地图三染色的例子，然后又对「信息」、「知识」和可满足电路的概念展开了介绍。</p>
<p>原文链接：https://sec-bit.github.io/blog/2019/07/31/zero-knowledge-and-proof/</p>
</li>
<li>
<p><a href="https://sec-bit.github.io/blog/2019/08/06/understand-zero-knowledge-proof-by-simulator/"target="_blank" rel="external nofollow noopener noreferrer">探索零知识证明系列二：从「模拟」理解零知识证明：平行宇宙与时光倒流<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>这篇文章介绍了零知识证明中的一个非常重要的概念——模拟（Simulator），「模拟」可以说是安全协议中核心的核心。文章中借助 “平行世界” 的假设去理解零知识读起来也非常有意思。</p>
<p>原文链接：https://sec-bit.github.io/blog/2019/08/06/understand-zero-knowledge-proof-by-simulator/</p>
</li>
<li>
<p><a href="https://sec-bit.github.io/blog/2019/08/28/extractor-and-proof-of-knowledge/"target="_blank" rel="external nofollow noopener noreferrer">探索零知识证明系列三：读心术：从零知识证明中提取「知识」<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>零知识证明有三个重要的性质：可靠性，完整性和零知识。这篇文章探讨了可靠性。文章解释了如何借助「抽取器」和时间倒流的超能力把 Alice 的「知识」完整地「抽取」出来，并可给出了一个与之相关攻击实例 —— ECDSA 签名攻击。</p>
<p>原文链接：https://sec-bit.github.io/blog/2019/08/28/extractor-and-proof-of-knowledge/</p>
</li>
<li>
<p><a href="https://sec-bit.github.io/blog/2019/11/01/from-interactive-zkp-to-non-interactive-zkp/"target="_blank" rel="external nofollow noopener noreferrer">探索零知识证明系列四：亚瑟王的「随机」挑战：从交互到非交互式零知识证明<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>这篇文章主要在讲零知识证明的信任根基——随机挑战。文章对零知识证明协议在两种不同的形式（交互式和非交互式）下随机挑战的方式进行了介绍。另外文章还对交互和非交互形式展开了介绍。</p>
<p>原文链接：https://sec-bit.github.io/blog/2019/11/01/from-interactive-zkp-to-non-interactive-zkp/</p>
</li>
</ul>
</li>
<li>
<p><strong>「推荐文章八」<a href="https://zhuanlan.zhihu.com/p/29491567"target="_blank" rel="external nofollow noopener noreferrer">零知识证明：一个略微严肃的科普<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️</p>
<p>邓老师这篇“略微严肃”的科普，主要涉及两部分：1. 交互式证明的巨大威力；2. 零知识证明的定义和那些广泛流传的错误的例子</p>
<p>原文链接：https://zhuanlan.zhihu.com/p/29491567</p>
</li>
<li>
<p><strong>「推荐文章九」<a href="https://blog.aventus.io/zero-knowledge-proofs-a-laymans-introduction-7020b93beeda"target="_blank" rel="external nofollow noopener noreferrer">Zero-Knowledge Proofs: A Layman’s Introduction<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这篇文章首先介绍了零知识证明协议中的三个参与者（Creator，Prover，Verifier）以及 Proofs 和 Verification的概念，并对 zkSNARK （一类零知识证明协议）和椭圆曲线的相关资料进行了介绍。</p>
<p>原文链接：https://blog.aventus.io/zero-knowledge-proofs-a-laymans-introduction-7020b93beeda</p>
</li>
<li>
<p><strong>「推荐文章十」<a href="https://zhuanlan.zhihu.com/p/33189921"target="_blank" rel="external nofollow noopener noreferrer">白话零知识证明（一）<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这篇来自秘猿科技的文章通过阿里巴巴的故事引出了零知识证明的一些概念，并对其进行了介绍。</p>
<p>原文链接：https://zhuanlan.zhihu.com/p/33189921</p>
</li>
</ul>
<p>零知识证明涉及很多很有意思的思想和原理，都很值得探讨。在此不得不感叹于数学与密码学的精妙之处，也不得不钦佩密码学家们的厉害。</p>
<h2 id="3-零知识证明的发展">3. 零知识证明的发展</h2>
<p>零知识证明的研究今年来一直有新的进展，密码学家们提出了各种不同的协议，推荐两篇文章介绍零知识证明研究的发展过程。</p>
<ul>
<li>
<p><strong>「推荐文章十一」<a href="https://zhuanlan.zhihu.com/p/31651393"target="_blank" rel="external nofollow noopener noreferrer">区块链学习笔记 (1)：零知识证明的江湖<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这篇文章讲了自 1895 年提出以来，零知识证明理论研究的发展过程，以及 zk-SNARKs 与零知识证明技术结合起来的发展过程。推荐给想了解零知识理论研究的发展过程的小伙伴。</p>
<p>原文链接：https://zhuanlan.zhihu.com/p/31651393</p>
</li>
<li>
<p><strong>「推荐文章十二」<a href="https://www.benthamsgaze.org/2019/05/22/efficient-cryptographic-arguments-and-proofs-or-how-i-became-a-fractional-monetary-unit/"target="_blank" rel="external nofollow noopener noreferrer">Efficient Cryptographic Arguments and Proofs – Or How I Became a Fractional Monetary Unit<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这篇文章来自UCL信息安全研究人员的博客 <a href="https://www.benthamsgaze.org/about/"target="_blank" rel="external nofollow noopener noreferrer">Bentham’s Gaze<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>[2],文章介绍了自零知识证明提出以来，这群研究人员在理论研究上的研究历程及成果，包括知名的 bulletProof 和 zk-STARK 等。读完这篇文章相信会对大家深入理解零知识证明的诸多协议有所帮助。</p>
<p>原文链接：https://www.benthamsgaze.org/2019/05/22/efficient-cryptographic-arguments-and-proofs-or-how-i-became-a-fractional-monetary-unit/</p>
</li>
</ul>
<p>零知识证明迄今为止发展了三十多年，早期一直停留在理论层面，直到近十年才逐渐取得突破。随着越来越多研究人员的进场，相信这个领域未来还会有更多令人惊喜的成果。</p>
<h2 id="4-zk-snarks-原理">4. zk-SNARKs 原理</h2>
<p>作为零知识证明领域最知名的一类协议，zk-SNARKs 的理论研究和应用也最为广泛。推荐一些介绍 zk-SNARKs 的资料。</p>
<ul>
<li>
<p><strong>「推荐文章十三」V 神的 zk-SNARKs 科普文章</strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️</p>
<p>V 神的这几篇文章应该算得上是流传最为广泛的 zk-SNARK 科普文了。不用多说，推荐阅读。</p>
<ul>
<li>
<p><a href="https://medium.com/@VitalikButerin/quadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649"target="_blank" rel="external nofollow noopener noreferrer">Quadratic Arithmetic Programs: from Zero to Hero<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>这篇文章详细介绍了 zk-SNARKs 的实现过程。文中将 zk-SNARKs 的实现分为以下几个步骤：</p>
<ol>
<li>computational problem —&gt; 电路</li>
<li>电路 —&gt; R1CS</li>
<li>R1CS —&gt; QAP</li>
<li>QAP —&gt; Linear PCP</li>
<li>Linear PCP —&gt; Linear Interactive Proof</li>
<li>Linear Interactive Proof —&gt; zkSNARK</li>
</ol>
<p>原文链接：https://medium.com/@VitalikButerin/quadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649</p>
</li>
<li>
<p><a href="https://medium.com/@VitalikButerin/exploring-elliptic-curve-pairings-c73c1864e627"target="_blank" rel="external nofollow noopener noreferrer">Exploring Elliptic Curve Pairings<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>这篇文章介绍了椭圆曲线配对。</p>
<p>原文链接：https://medium.com/@VitalikButerin/exploring-elliptic-curve-pairings-c73c1864e627</p>
</li>
<li>
<p><a href="https://medium.com/@VitalikButerin/zk-snarks-under-the-hood-b33151a013f6"target="_blank" rel="external nofollow noopener noreferrer">Zk-SNARKs: Under the Hood<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>这篇文章主要介绍了匹诺曹协议。</p>
<p>原文链接：https://medium.com/@VitalikButerin/zk-snarks-under-the-hood-b33151a013f6</p>
</li>
</ul>
</li>
<li>
<p><strong>「推荐文章十四」<a href="https://z.cash/technology/zksnarks/"target="_blank" rel="external nofollow noopener noreferrer">zcash 官方科普文<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️</p>
<p>这个系列的文章来自 zCash 官方博客。首先介绍了零知识的基本概念以及其应用到 zcash 中的大致思路。随后 7 篇文章分别对 7 个关键点进行了详细介绍（同态隐藏，多项式盲验证，KCA，完整的多项式盲验证，计算到多项式的转换，匹诺曹协议以及椭圆曲线配对），推荐给想深入了解 zk-SNARKs 实现原理的小伙伴。</p>
<p>原文链接：</p>
<ol>
<li>What are zk-SNARKs?：https://z.cash/technology/zksnarks/</li>
<li>Explaining SNARKs Part I: Homomorphic Hidings <a href="https://electriccoin.co/blog/snark-explain/"target="_blank" rel="external nofollow noopener noreferrer">https://electriccoin.co/blog/snark-explain/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>Explaining SNARKs Part II: Blind Evaluation of Polynomials <a href="https://electriccoin.co/blog/snark-explain2/"target="_blank" rel="external nofollow noopener noreferrer">https://electriccoin.co/blog/snark-explain2/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>Explaining SNARKs Part III: The Knowledge of Coefficient Test and Assumption <a href="https://electriccoin.co/blog/snark-explain3/"target="_blank" rel="external nofollow noopener noreferrer">https://electriccoin.co/blog/snark-explain3/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>Explaining SNARKs Part IV: How to make Blind Evaluation of Polynomials Verifiable <a href="https://electriccoin.co/blog/snark-explain4/"target="_blank" rel="external nofollow noopener noreferrer">https://electriccoin.co/blog/snark-explain4/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>Explaining SNARKs Part V: From Computations to Polynomials <a href="https://electriccoin.co/blog/snark-explain5/"target="_blank" rel="external nofollow noopener noreferrer">https://electriccoin.co/blog/snark-explain5/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>Explaining SNARKs Part VI: The Pinocchio Protocol <a href="https://electriccoin.co/blog/snark-explain6/"target="_blank" rel="external nofollow noopener noreferrer">https://electriccoin.co/blog/snark-explain6/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>Explaining SNARKs Part VII: Pairings of Elliptic Curves](<a href="https://electriccoin.co/blog/snark-explain7/"target="_blank" rel="external nofollow noopener noreferrer">https://electriccoin.co/blog/snark-explain7/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>中文翻译版本链接：https://www.jianshu.com/p/b6a14c472cc1、https://www.jianshu.com/p/92f54fc08d58</li>
</ol>
</li>
<li>
<p><strong>「推荐文章十五」<a href="https://arxiv.org/pdf/1906.07221.pdf"target="_blank" rel="external nofollow noopener noreferrer">Why and How zk-SNARK Works<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>作者将其学习 zk-SNARK 的经验总结成了一份 PDF 文档并分成 8 篇文章发布到了 Medium 上。与大部分的 zk-SNARK 科普文不同，这个系列的文章没有直接开始讲 zk-SNARK，而是从最基本的数学原理讲起，讲解得非常细致，特别适合数学和密码学基础相对薄弱的小伙伴。</p>
<p>原文链接：</p>
<ol>
<li>PDF 完整版：https://arxiv.org/pdf/1906.07221.pdf</li>
<li>Why and How zk-SNARK Works 1: Introduction &amp; the Medium of a Proof：https://medium.com/@imolfar/why-and-how-zk-snark-works-1-introduction-the-medium-of-a-proof-d946e931160</li>
<li>Why and How zk-SNARK Works 2: Proving Knowledge of a Polynomial：https://medium.com/@imolfar/why-and-how-zk-snark-works-2-proving-knowledge-of-a-polynomial-f817760e2805</li>
<li>Why and How zk-SNARK Works 3: Non-interactivity &amp; Distributed Setup：https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-distributed-setup-c0310c0e5d1c</li>
<li>Why and How zk-SNARK Works 4: General-Purpose Computation：https://medium.com/@imolfar/why-and-how-zk-snark-works-4-general-purpose-computation-dcdc8081ee42</li>
<li>Why and How zk-SNARK Works 5: Variable Polynomials：https://medium.com/@imolfar/why-and-how-zk-snark-works-5-variable-polynomials-3b4e06859e30</li>
<li>Why and How zk-SNARK Works 6: Verifiable Computation Protocol：https://medium.com/@imolfar/why-and-how-zk-snark-works-6-verifiable-computation-protocol-1aa19f95a5cc</li>
<li>Why and How zk-SNARK Works 7: Constraints and Public Inputs：https://medium.com/@imolfar/why-and-how-zk-snark-works-7-constraints-and-public-inputs-e95f6596dd1c</li>
<li>Why and How zk-SNARK Works 8: Zero-Knowledge Computation：https://medium.com/@imolfar/why-and-how-zk-snark-works-8-zero-knowledge-computation-f120339c2c55</li>
</ol>
</li>
<li>
<p><strong>「推荐文章十六」 <a href="https://blog.ethereum.org/2016/12/05/zksnarks-in-a-nutshell/"target="_blank" rel="external nofollow noopener noreferrer">zkSNARKs in a nutshell<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章对零知识证明做了总结，分成四个部分：</p>
<ol>
<li>编码成一个多项式问题</li>
<li>简单随机抽样</li>
<li>同态（Homomorphic）编码 / 加密</li>
<li>零知识</li>
</ol>
<p>文章首先介绍了零知识证明，然后又讲解了zk-SNARKs 的实现，最后分析了将零知识证明结合到以太坊上的作用和方式。</p>
<p>原文链接：https://blog.ethereum.org/2016/12/05/zksnarks-in-a-nutshell/</p>
<p>中文翻译版本：https://zhuanlan.zhihu.com/p/31780893</p>
</li>
<li>
<p><strong>「推荐文章十七」<a href="https://medium.com/@weijiek/how-i-learned-zk-snarks-from-scratch-177a01c5514e"target="_blank" rel="external nofollow noopener noreferrer">Zero-knowledge proofs, a board game, and leaky abstractions: how I learned zk-SNARKs from scratch<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>作者坚持一个观点：学习新技能的一个很好的方法是用它建立一些东西。这篇文章就是在介绍作者是如何通过实现一个小的应用来学习 zk-SNARKs 的。文章主要介绍了作者的实现过程和他的思考，文中有很多好的经验时候大家学习。</p>
<p>原文链接：https://medium.com/@weijiek/how-i-learned-zk-snarks-from-scratch-177a01c5514e</p>
</li>
<li>
<p><strong>「推荐文章十八」<a href="https://mp.weixin.qq.com/s/eU8mp81VhpV-g1x89-uZYA"target="_blank" rel="external nofollow noopener noreferrer">零知识证明 - 从QSP到QAP<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章主要介绍了 QSP/QAP ，QAP 和 QSP 问题类似。QAP 问题的zkSNARK 的证明验证过程和 QSP 非常相似。对这部分感兴趣的小伙伴推荐读一读。</p>
<p>原文链接：https://mp.weixin.qq.com/s/eU8mp81VhpV-g1x89-uZYA</p>
</li>
</ul>
<p>&ldquo;零知识证明技术就像一个江湖，而 zk-SNARKs 是只是比较著名的门派。而在这个江湖中，还有很多其他的门派，他们风格各异，使用的武器也不尽相同。&quot;[3] zk-SNARKs 协议涉及的技术构件很多，也较为复杂，深入学习这部分确实需要下很多功夫。</p>
<h2 id="5-零知识证明协议">5. 零知识证明协议</h2>
<p>零知识证明协议很多，每个协议的实现也各不相同，有些协议已经应用到了实际的领域，有些还在探索中。推荐几篇介绍不错的文章。</p>
<ul>
<li>
<p><strong>「推荐文章十九」STARKs 科普</strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️</p>
<p>V 神的这个科普系列文章，非常详细得介绍了 STARKs 的实现，分成三个部分进行讲解。</p>
<p>原文链接：</p>
<ol>
<li>
<p>STARKs, Part I: Proofs with Polynomials：https://vitalik.ca/general/2017/11/09/starks_part_1.html</p>
<p>中文翻译版本：https://ethfans.org/posts/starks_part_1</p>
</li>
<li>
<p>STARKs, Part II: Thank Goodness It&rsquo;s FRI-day：https://vitalik.ca/general/2017/11/22/starks_part_2.html</p>
<p>中文翻译版本：https://ethfans.org/posts/starks_part_2</p>
</li>
<li>
<p>STARKs, Part 3: Into the Weeds：https://vitalik.ca/general/2018/07/21/starks_part_3.html)</p>
<p>中文翻译版本：https://ethfans.org/posts/starks_part_3_1</p>
<p>中文翻译版本：https://ethfans.org/posts/starks_part_3_2</p>
</li>
</ol>
</li>
<li>
<p><strong>「推荐文章二十」 <a href="https://vitalik.ca/general/2019/09/22/plonk.html"target="_blank" rel="external nofollow noopener noreferrer">Understanding PLONK<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️</p>
<p>这篇文章同样来自 V 神的博客，介绍了 PLONK 的工作原理。PLONK 是一种全新的零知识证明系统，支持通用或可更新的可信设置（trusted setup），作者是 Filecoin 母公司 Protocol Labs 的研究员 Ariel Gabizon 和以太坊隐私交易协议 Aztec Protocol 的两名研究人员 Zachary J. Williamson、Oana Ciobotaru。</p>
<p>原文链接：https://vitalik.ca/general/2019/09/22/plonk.html</p>
<p>中文翻译版本：https://www.8btc.com/article/486086</p>
</li>
<li>
<p><strong>「推荐文章二十一」<a href="https://github.com/huyuguang/zkpblog/blob/master/groth09.md"target="_blank" rel="external nofollow noopener noreferrer">Groth09 笔记<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章作者huyuguang，文中对 Groth09 论文[4]的内容进行了总结，对大家学习 Groth09 有所帮助。</p>
<p>原文链接：https://github.com/huyuguang/zkpblog/blob/master/groth09.md</p>
</li>
<li>
<p><strong>「推荐文章二十二」 零知识证明 - Groth16 算法介绍</strong></p>
<p>推荐值：❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>Star Li 的这两篇文章主要从工程应用理解的角度介绍了 Groth16 算法的证明和验证过程，推荐给学习 Groth16 算法的小伙伴。</p>
<p>原文链接</p>
<ol>
<li>零知识证明 - Groth16 算法介绍：https://mp.weixin.qq.com/s/SguBb5vyAm2Vzht7WKgzug</li>
<li>零知识证明 - 有关 Groth16 的zk证明的理解：https://mp.weixin.qq.com/s/x1ggw3VplXAIeL87D5bUfw</li>
</ol>
</li>
</ul>
<p>对于零知识证明各个协议介绍的文章还比较有限，随着应用的增多，相信这方面的文章也会越来越多。</p>
<h2 id="6--零知识证明在区块链领域的应用">6.  零知识证明在区块链领域的应用</h2>
<p>零知识证明技术是随着区块链的发展逐渐走入大众视野的，目前零知识证明结合区块链的研究和应用也越来越多。</p>
<ul>
<li>
<p><strong>「推荐文章二十三」 <a href="https://www.odaily.com/post/5133827"target="_blank" rel="external nofollow noopener noreferrer">一文读懂区块链中的零知识证明<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇来自BFTF技术社区联盟的文章介绍了零知识证明在 zcash 和门罗币上的应用。</p>
<p>原文链接：https://www.odaily.com/post/5133827</p>
</li>
<li>
<p><strong>「推荐文章二十四」<a href="https://medium.com/hackernoon/how-to-prove-that-you-know-something-without-revealing-it-zero-knowledge-proofs-zcash-ethereum-43ce35d4d1c5"target="_blank" rel="external nofollow noopener noreferrer">How to prove that you know something, without revealing it? Zero-knowledge proofs, ZCash, Ethereum.<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这篇文章介绍了零知识证明在 Zcash 和以太坊上的应用。</p>
<p>原文链接：https://medium.com/hackernoon/how-to-prove-that-you-know-something-without-revealing-it-zero-knowledge-proofs-zcash-ethereum-43ce35d4d1c5</p>
</li>
<li>
<p><strong>「推荐文章二十五」<a href="https://blog.keep.network/zero-knowledge-proofs-zcash-and-ethereum-f6d89fa7cba8"target="_blank" rel="external nofollow noopener noreferrer">Zero-knowledge proofs, Zcash, and Ethereum<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这篇文章介绍了零知识证明在 Zcash 和以太坊上的应用。</p>
<p>原文链接：https://blog.keep.network/zero-knowledge-proofs-zcash-and-ethereum-f6d89fa7cba8</p>
</li>
<li>
<p><strong>「推荐文章二十六」<a href="https://mp.weixin.qq.com/s/9QccZtFcvGwne-NN4BBA5w"target="_blank" rel="external nofollow noopener noreferrer">零知识证明 - zk-SNARK应用场景分析<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️</p>
<p>这篇文章介绍了零知识证明在 Zcash，Filecoin项目和 Loopring DEX 3.0 协议中的应用。</p>
<p>原文链接：https://mp.weixin.qq.com/s/9QccZtFcvGwne-NN4BBA5w</p>
</li>
<li>
<p><strong>「推荐文章二十七」<a href="https://blog.cryptographyengineering.com/2013/04/11/zerocoin-making-bitcoin-anonymous/"target="_blank" rel="external nofollow noopener noreferrer">Zerocoin: making Bitcoin anonymous<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章介绍了 Zerocoin 协议是如何利用 zk-SNARKs 在区块链上实现匿名的。</p>
<p>原文链接：https://blog.cryptographyengineering.com/2013/04/11/zerocoin-making-bitcoin-anonymous/</p>
</li>
<li>
<p><strong>「推荐文章二十八」<a href="https://zhuanlan.zhihu.com/p/24440530"target="_blank" rel="external nofollow noopener noreferrer">不是程序员也能看懂的ZCash零知识证明<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章使用比较通俗易懂的语言介绍了 zCash 如何利用零知识证明实现匿名交易的。</p>
<p>原文链接：https://zhuanlan.zhihu.com/p/24440530</p>
</li>
<li>
<p><strong>「推荐文章二十九」 <a href="https://www.coindesk.com/monero-to-become-first-billion-dollar-crypto-to-implement-bulletproofs-tech"target="_blank" rel="external nofollow noopener noreferrer">Monero to Become First Billion-Dollar Crypto to Implement ‘Bulletproofs’ Tech<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章介绍了 Monero 如何使用 Bulletproofs 技术实现隐私特性的。</p>
<p>原文链接：https://www.coindesk.com/monero-to-become-first-billion-dollar-crypto-to-implement-bulletproofs-tech</p>
</li>
<li>
<p><strong>「推荐文章三十」 <a href="https://mp.weixin.qq.com/s/TCYDfOAle0K3D69eBm6HNw"target="_blank" rel="external nofollow noopener noreferrer">zkPoD:区块链，零知识证明与形式化验证，实现无中介、零信任的公平交易<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这是安比实验室今年发布的基于零知识证明的公平交易协议。</p>
<p>原文链接：https://mp.weixin.qq.com/s/TCYDfOAle0K3D69eBm6HNw</p>
</li>
<li>
<p><strong>「推荐文章三十一」 <a href="https://mp.weixin.qq.com/s/oTbzyqtc-TzJXbMafj28DQ"target="_blank" rel="external nofollow noopener noreferrer">零知识证明 - Loopring DEX 3.0<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章介绍了 Loopring DEX 3.0 协议的零知识证明部分实现原理。</p>
<p>原文链接：https://mp.weixin.qq.com/s/oTbzyqtc-TzJXbMafj28DQ</p>
</li>
</ul>
<p>零知识证明的应用正在逐步增加，从最早的公链 zCash，Monero，到最近基于以太坊平台的 zkPoD, Loopring DEX 3.0应用等，零知识证明在区块链领域的应用将越来越多。</p>
<h2 id="7-零知识证明相关的技术和漏洞分析文章">7. 零知识证明相关的技术和漏洞分析文章</h2>
<p>零知识证明技术涉及的知识内容很多，在实际的应用场景中，零知识证明的实现还存在诸多的挑战，协议安全，性能等等问题都有可能限制其发展。这一节推荐一些技术分析和漏洞分析的文章。</p>
<ul>
<li>
<p><strong>「推荐文章三十二」 A Marlin is One of the Fastest SNARKs in the Ocean</strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️</p>
<p>这篇文章来自于博客 <a href="https://www.benthamsgaze.org/"target="_blank" rel="external nofollow noopener noreferrer">Bentham’s Gaze<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，文章观点认为 Marlin 是最快的 SNARKs 方案，并将其与其它的方案进行了比较。</p>
<p>原文链接：https://www.benthamsgaze.org/2019/09/19/a-marlin-is-one-of-the-fastest-snarks-in-the-ocean/</p>
</li>
<li>
<p><strong>「推荐文章三十三」<a href="https://www.benthamsgaze.org/2016/10/25/how-to-do-zero-knowledge-from-discrete-logs-in-under-7kb/"target="_blank" rel="external nofollow noopener noreferrer">How to do Zero-Knowledge from Discrete-Logs in under 7kB<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章同样来自于博客 <a href="https://www.benthamsgaze.org/"target="_blank" rel="external nofollow noopener noreferrer">Bentham’s Gaze<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，文章介绍了Groth09 论文中的优化方案。</p>
<p>原文链接：https://www.benthamsgaze.org/2016/10/25/how-to-do-zero-knowledge-from-discrete-logs-in-under-7kb/</p>
</li>
<li>
<p><strong>「推荐文章三十四」<a href="https://sec-bit.github.io/blog/page/2/"target="_blank" rel="external nofollow noopener noreferrer">zkSNARK 合约「输入假名」漏洞致众多混币项目爆雷<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章的作者是安比实验室 p0n1，文章介绍了大量零知识证明项目由于错误地使用了某个 zkSNARKs 合约库，引入「输入假名 (Input Aliasing) 」漏洞，可导致伪造证明、双花、重放等攻击行为发生，且攻击成本极低。</p>
<p>原文链接：https://sec-bit.github.io/blog/page/2/</p>
</li>
<li>
<p><strong>「推荐文章三十五」<a href="https://zhuanlan.zhihu.com/p/87690026"target="_blank" rel="external nofollow noopener noreferrer">硬核！360高级安全专家彭峙酿以Zcash为例，谈零知识性证明的安全和隐私问题<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>这篇文章是对360高级安全专家彭峙酿博士在 CCF 会议上分享报告的整理。报告中介绍了比特币的隐私问题，零知识证明技术，zk-SNARKs，以及多个实现漏洞。报告干货满满。</p>
<p>原文链接：https://zhuanlan.zhihu.com/p/87690026</p>
</li>
<li>
<p><strong>「推荐文章三十六」<a href="https://github.com/huyuguang/zkpblog/blob/master/%e6%9c%89%e9%99%90%e5%9f%9f.md"target="_blank" rel="external nofollow noopener noreferrer">零知识证明中所涉及的有限域<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️</p>
<p>有限域的计算是实现零知识证明协议的一个非常重要的环境，这篇文章对零知识证明中所涉及导的有限域的知识进行了介绍，非常有用。</p>
<p>原文链接：https://github.com/huyuguang/zkpblog/blob/master/有限域.md</p>
</li>
</ul>
<h2 id="8-零知识证明开源仓库及介绍">8. 零知识证明开源仓库及介绍</h2>
<p>下面介绍几个热度比较高的零知识证明实现仓库及其源码分析文章，很多的零知识项目都是基于这几个仓库的代码做的。</p>
<ul>
<li>
<p><a href="https://github.com/scipr-lab/libsnark"target="_blank" rel="external nofollow noopener noreferrer">libsnark<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>libsnark 是实现一个 C++ 版本的零知识证明库。</p>
<p>仓库链接：https://github.com/scipr-lab/libsnark</p>
<ul>
<li>
<p><strong>「推荐文章三十七」<a href="https://mp.weixin.qq.com/s/UHqpfl6ImVwa4HtsiksqJA"target="_blank" rel="external nofollow noopener noreferrer">零知识证明 - libsnark源代码分析<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>原文链接：https://mp.weixin.qq.com/s/UHqpfl6ImVwa4HtsiksqJA</p>
</li>
<li>
<p><strong>「推荐文章三十八」<a href="https://zhuanlan.zhihu.com/p/46477111"target="_blank" rel="external nofollow noopener noreferrer">零知识证明实战：libsnark<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>原文链接：https://zhuanlan.zhihu.com/p/46477111</p>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/zkcrypto/bellman"target="_blank" rel="external nofollow noopener noreferrer">bellman<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>bellman是Zcash团队用Rust语言开发的一个zk-SNARK软件库，实现了Groth16 算法。</p>
<p>仓库链接：https://github.com/zkcrypto/bellman</p>
<ul>
<li>
<p><strong>「推荐文章三十九」<a href="https://mp.weixin.qq.com/s/NvX11tNSEpV1DR-3PwpIAQ"target="_blank" rel="external nofollow noopener noreferrer">零知识证明 - bellman源码分析<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></strong></p>
<p>推荐值：❤️❤️</p>
<p>难度值：⭐️⭐️⭐️</p>
<p>原文链接：https://github.com/zcash/librustzcash/tree/master/bellman</p>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/iden3/snarkjs"target="_blank" rel="external nofollow noopener noreferrer">snarkjs<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>libsnark 是实现一个 javascript 版本的零知识证明库，实现了 Groth16。</p>
<p>仓库链接：https://github.com/iden3/snarkjs</p>
</li>
</ul>
<h2 id="9-零知识证明相关论文">9. 零知识证明相关论文</h2>
<p>下面介绍一下零知识证明相关的学术论文，深入学习零知识证明研究成果的小伙伴可以去阅读以下的这些论文。</p>
<p>推荐值：❤️❤️❤️</p>
<p>难度值：⭐️⭐️⭐️⭐️⭐️</p>
<ul>
<li>
<p>1985 年，零知识证明技术首次被提出</p>
<p>原文链接：<a href="https://epubs.siam.org/doi/10.1137/0218012"target="_blank" rel="external nofollow noopener noreferrer">The Knowledge Complexity of Interactive Proof Systems<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</li>
<li>
<p>BulletProof</p>
<ol>
<li>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-642-03356-8_12"target="_blank" rel="external nofollow noopener noreferrer">Gro09 <i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>提出了一种证明“向量内积”的方法：</p>
<p>原文链接：https://link.springer.com/chapter/10.1007/978-3-642-03356-8_12</p>
</li>
<li>
<p><a href="https://eprint.iacr.org/2016/263"target="_blank" rel="external nofollow noopener noreferrer">BCC+16<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 找到了一种将算数电路编码为向量的方法，从而把电路可满足性的证明转化为向量内积的证明：</p>
<p>原文链接：https://eprint.iacr.org/2016/263</p>
</li>
<li>
<p><a href="https://eprint.iacr.org/2017/1066"target="_blank" rel="external nofollow noopener noreferrer">BulletProof<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>继续改进了这种方案：</p>
<p>原文链接：https://eprint.iacr.org/2017/1066</p>
</li>
</ol>
</li>
<li>
<p>zkSNARKs with trusted setup</p>
<ol>
<li>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-642-17373-8_19"target="_blank" rel="external nofollow noopener noreferrer">Groth10<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 引入了preprocessing的步骤，通过可信第三方生成Common Reference String来实现无交互证明:</p>
<p>原文链接：https://link.springer.com/chapter/10.1007/978-3-642-17373-8_19</p>
</li>
<li>
<p><a href="https://eprint.iacr.org/2012/215"target="_blank" rel="external nofollow noopener noreferrer">GGPR13<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 引入了另一种算数电路编码方式，即Quadratic Arithmetic Program(QAP)，大大提升了证明的效率:</p>
<p>原文链接：https://eprint.iacr.org/2012/215</p>
</li>
<li>
<p><a href="https://eprint.iacr.org/2013/279"target="_blank" rel="external nofollow noopener noreferrer">Pinocchio<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 和 <a href="https://eprint.iacr.org/2016/260"target="_blank" rel="external nofollow noopener noreferrer">Groth16<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 等是在此基础上的改进:</p>
<p>原文链接：https://eprint.iacr.org/2013/279</p>
<p>原文链接：https://eprint.iacr.org/2016/260</p>
</li>
</ol>
</li>
<li>
<p><a href="https://acmccs.github.io/papers/p2087-amesA.pdf"target="_blank" rel="external nofollow noopener noreferrer">Ligero: Lightweight Sublinear Arguments Without a Trusted Setup<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>:</p>
<p>原文链接：https://acmccs.github.io/papers/p2087-amesA.pdf</p>
</li>
<li>
<p>PLONK:</p>
<p>原文链接：https://eprint.iacr.org/2019/953</p>
</li>
<li>
<p>Marlin</p>
<p>原文链接：https://eprint.iacr.org/2019/1047.pdf</p>
</li>
<li>
<p>Sonic</p>
<p>原文链接：https://eprint.iacr.org/2019/099</p>
</li>
<li>
<p>Libra</p>
<p>原文链接：https://eprint.iacr.org/2019/317</p>
</li>
<li>
<p>Hyrax</p>
<p>原文链接：https://eprint.iacr.org/2017/1132.pdf</p>
</li>
<li>
<p>zk-STARKs</p>
<p>原文链接：https://eprint.iacr.org/2018/046</p>
</li>
</ul>
<h2 id="10-零知识证明学习资料推荐网站">10. 零知识证明学习资料推荐网站</h2>
<ul>
<li>
<p><a href="https://github.com/matter-labs/awesome-zero-knowledge-proofs"target="_blank" rel="external nofollow noopener noreferrer">awesome-zero-knowledge-proofs<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>这是一个 Github 仓库，收录了一系列零知识证明的学习资料</p>
<p>链接：https://github.com/matter-labs/awesome-zero-knowledge-proofs</p>
</li>
<li>
<p><a href="https://zkp.science/"target="_blank" rel="external nofollow noopener noreferrer">Zero-Knowledge Proofs<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>这个网站也收录了一系列零知识证明的学习资料，相对来说学术性更强一些。</p>
<p>链接：<a href="https://zkp.science/"target="_blank" rel="external nofollow noopener noreferrer">https://zkp.science<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</li>
<li>
<p><a href="https://zkproof.org/workshop2/abstracts.html"target="_blank" rel="external nofollow noopener noreferrer">zkproof<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>推荐值：❤️❤️❤️❤️</p>
<p>ZKProof.org 是为规范零知识证明的使用而形成的一个组织，它的网站上有大量关于零知识证明的资料。</p>
<p>链接：https://zkproof.org/</p>
</li>
<li>
<p><a href="https://www.benthamsgaze.org"target="_blank" rel="external nofollow noopener noreferrer">benthamsgaze.org<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>推荐值：❤️❤️❤️</p>
<p>这是一个来自UCL信息安全研究人员组成的团队的博客，它的博客上会经常发布一些零知识证明的文章。</p>
<p>链接：https://www.benthamsgaze.org</p>
</li>
</ul>
<h2 id="参考文献">参考文献</h2>
<p>[1] <a href="https://isi.jhu.edu/~mgreen/"target="_blank" rel="external nofollow noopener noreferrer">https://isi.jhu.edu/~mgreen/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>[2] <a href="https://www.benthamsgaze.org/about"target="_blank" rel="external nofollow noopener noreferrer">https://www.benthamsgaze.org/about<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>[3] <a href="https://zhuanlan.zhihu.com/p/31651393"target="_blank" rel="external nofollow noopener noreferrer">https://zhuanlan.zhihu.com/p/31651393<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>[4] <a href="https://link.springer.com/chapter/10.1007/978-3-642-03356-8_12"target="_blank" rel="external nofollow noopener noreferrer">https://link.springer.com/chapter/10.1007/978-3-642-03356-8_12<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>[5] <a href="https://github.com/matter-labs/awesome-zero-knowledge-proofs"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/matter-labs/awesome-zero-knowledge-proofs<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>[6] <a href="https://zkp.science/"target="_blank" rel="external nofollow noopener noreferrer">https://zkp.science/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>[7] <a href="https://zhuanlan.zhihu.com/p/89386868?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=26765481213952"target="_blank" rel="external nofollow noopener noreferrer">https://zhuanlan.zhihu.com/p/89386868?utm_source=wechat_session&utm_medium=social&utm_oi=26765481213952<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>]]></description>
</item>
<item>
  <title>我的第一篇文章</title>
  <link>http://blog.579878700.xyz/posts/first_post/</link>
  <pubDate>Mon, 20 Feb 2023 20:14:22 &#43;0800</pubDate>
  <author>作者</author>
  <guid>http://blog.579878700.xyz/posts/first_post/</guid>
  <description><![CDATA[博客（英语：Blog）是一种在线日记型式的个人网站，借由张帖子章、图片或视频来记录生活、抒发情感或分享信息。博客上的文章通常根据张贴时间，以]]></description>
</item>
</channel>
</rss>
